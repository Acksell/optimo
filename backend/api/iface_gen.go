// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// NewPurchaseOrder defines model for NewPurchaseOrder.
type NewPurchaseOrder struct {
	EstimatedDeliveryDate *openapi_types.Date `json:"estimated_delivery_date,omitempty"`
	OrderDate             openapi_types.Date  `json:"order_date"`
	ProductId             int                 `json:"product_id"`
	Quantity              int                 `json:"quantity"`
	SupplierId            string              `json:"supplier_id"`
}

// PurchaseOrder defines model for PurchaseOrder.
type PurchaseOrder struct {
	CreatedAt             *time.Time          `json:"created_at,omitempty"`
	EstimatedDeliveryDate *openapi_types.Date `json:"estimated_delivery_date,omitempty"`
	Id                    *int                `json:"id,omitempty"`
	OrderDate             *openapi_types.Date `json:"order_date,omitempty"`
	ProductId             *int                `json:"product_id,omitempty"`
	Quantity              *int                `json:"quantity,omitempty"`
	SupplierId            *string             `json:"supplier_id,omitempty"`
}

// SalesData defines model for SalesData.
type SalesData struct {
	InventoryTurnover *int     `json:"inventory_turnover,omitempty"`
	ProductId         *int     `json:"product_id,omitempty"`
	SalesTurnover     *float32 `json:"sales_turnover,omitempty"`
	YearMonth         *string  `json:"year_month,omitempty"`
}

// GetSalesParams defines parameters for GetSales.
type GetSalesParams struct {
	// StartDate Filter sales starting from this date (inclusive)
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate Filter sales up to this date (inclusive)
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`

	// ProductIds Filter sales by one or more product IDs
	ProductIds *[]int `form:"product_ids,omitempty" json:"product_ids,omitempty"`
}

// PostPurchaseOrdersJSONRequestBody defines body for PostPurchaseOrders for application/json ContentType.
type PostPurchaseOrdersJSONRequestBody = NewPurchaseOrder

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all purchase orders
	// (GET /purchase-orders)
	GetPurchaseOrders(w http.ResponseWriter, r *http.Request)
	// Create a new purchase order
	// (POST /purchase-orders)
	PostPurchaseOrders(w http.ResponseWriter, r *http.Request)
	// Delete a purchase order
	// (DELETE /purchase-orders/{id})
	DeletePurchaseOrdersId(w http.ResponseWriter, r *http.Request, id int)
	// Get sales data aggregated by month
	// (GET /sales)
	GetSales(w http.ResponseWriter, r *http.Request, params GetSalesParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all purchase orders
// (GET /purchase-orders)
func (_ Unimplemented) GetPurchaseOrders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new purchase order
// (POST /purchase-orders)
func (_ Unimplemented) PostPurchaseOrders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a purchase order
// (DELETE /purchase-orders/{id})
func (_ Unimplemented) DeletePurchaseOrdersId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get sales data aggregated by month
// (GET /sales)
func (_ Unimplemented) GetSales(w http.ResponseWriter, r *http.Request, params GetSalesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPurchaseOrders operation middleware
func (siw *ServerInterfaceWrapper) GetPurchaseOrders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPurchaseOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPurchaseOrders operation middleware
func (siw *ServerInterfaceWrapper) PostPurchaseOrders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPurchaseOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePurchaseOrdersId operation middleware
func (siw *ServerInterfaceWrapper) DeletePurchaseOrdersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePurchaseOrdersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSales operation middleware
func (siw *ServerInterfaceWrapper) GetSales(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSalesParams

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	// ------------- Optional query parameter "product_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_ids", r.URL.Query(), &params.ProductIds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "product_ids", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSales(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/purchase-orders", wrapper.GetPurchaseOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/purchase-orders", wrapper.PostPurchaseOrders)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/purchase-orders/{id}", wrapper.DeletePurchaseOrdersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sales", wrapper.GetSales)
	})

	return r
}
